{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ERC721_NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionNFTCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33f6906c8bf11878c5044849cbbb7775479f53de5003680e9d914c278faa0f57",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2896730",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000008000000000100000000040000000000000000000000000040020000000020000100000800000000000000000000000010000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000800000000000000000000000000000000000000000000000000042000000200000000000000000000000002000000000000000000060000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2543788379feabbb95f66fd450e84afbfd7a589cb7debf5003e18d7408de7de6",
    "transactionHash": "0x33f6906c8bf11878c5044849cbbb7775479f53de5003680e9d914c278faa0f57",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x33f6906c8bf11878c5044849cbbb7775479f53de5003680e9d914c278faa0f57",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2543788379feabbb95f66fd450e84afbfd7a589cb7debf5003e18d7408de7de6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x33f6906c8bf11878c5044849cbbb7775479f53de5003680e9d914c278faa0f57",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xeadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000632970bf000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d5668343142637057515632646f69476a6b63664d437866623469776a714e4157385758674b39357939453763000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x2543788379feabbb95f66fd450e84afbfd7a589cb7debf5003e18d7408de7de6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x33f6906c8bf11878c5044849cbbb7775479f53de5003680e9d914c278faa0f57",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x2543788379feabbb95f66fd450e84afbfd7a589cb7debf5003e18d7408de7de6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x33f6906c8bf11878c5044849cbbb7775479f53de5003680e9d914c278faa0f57",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xeadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000632970bf000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002e516d586656694c4474414a4a4668766e6d6b66417235547765363671784552334470565a517a4d43507868575131000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0x2543788379feabbb95f66fd450e84afbfd7a589cb7debf5003e18d7408de7de6"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2896730",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "QmVh41BcpWQV2doiGjkcfMCxfb4iwjqNAW8WXgK95y9E7c",
      "QmXfViLDtAJJFhvnmkfAr5Twe66qxER3DpVZQzMCPxhWQ1"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "9baa843c98b2895bab40f3035b9037be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ERC721_NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionNFTCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftAlbum.sol\":\"ArijitSinghMusicAlbum\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftAlbum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nerror ERC721_NotOwner(address);\\r\\n\\r\\ncontract ArijitSinghMusicAlbum is ERC721, ERC721URIStorage {\\r\\n  using Counters for Counters.Counter;\\r\\n  address private immutable i_owner;\\r\\n  uint8 private s_TotalNFTs;\\r\\n  Counters.Counter private s_tokenIds;\\r\\n\\r\\n  event NFTCreated(\\r\\n    string tokenURI,\\r\\n    uint256 timeStamp,\\r\\n    address owner,\\r\\n    uint256 tokenId\\r\\n  );\\r\\n\\r\\n  constructor(string[] memory tokenURIs)\\r\\n    ERC721(\\\"ArijitsinghMusicAlbum\\\", \\\"ASINGH\\\")\\r\\n  {\\r\\n    i_owner = msg.sender;\\r\\n    for (uint8 i = 0; i < tokenURIs.length; i++) {\\r\\n      createToken(tokenURIs[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\r\\n    super._burn(tokenId);\\r\\n    s_TotalNFTs = 0;\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    override(ERC721, ERC721URIStorage)\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return super.tokenURI(tokenId);\\r\\n  }\\r\\n\\r\\n  function createToken(string memory _tokenURI) public {\\r\\n    if (msg.sender != i_owner) {\\r\\n      revert ERC721_NotOwner(msg.sender);\\r\\n    }\\r\\n    s_TotalNFTs++;\\r\\n    uint256 currentId = s_tokenIds.current();\\r\\n    s_tokenIds.increment();\\r\\n    _safeMint(msg.sender, currentId);\\r\\n    _setTokenURI(currentId, _tokenURI);\\r\\n    emit NFTCreated(_tokenURI, block.timestamp, msg.sender, currentId);\\r\\n  }\\r\\n\\r\\n  //getter\\r\\n  function collectionNFTCount() public view returns (uint8) {\\r\\n    return s_TotalNFTs;\\r\\n  }\\r\\n\\r\\n  function currentTokenId() public view returns (uint256) {\\r\\n    return s_tokenIds.current();\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xafb8f7e531c3943f51b6c5e63c3eecdd3be4eb6b4e1942910fe40674f2b40744\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200404538038062004045833981810160405281019062000037919062000aa8565b6040518060400160405280601581526020017f4172696a697473696e67684d75736963416c62756d00000000000000000000008152506040518060400160405280600681526020017f4153494e474800000000000000000000000000000000000000000000000000008152508160009081620000b4919062000d44565b508060019081620000c6919062000d44565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060005b81518160ff16101562000154576200013e828260ff16815181106200012a576200012962000e2b565b5b60200260200101516200015c60201b60201c565b80806200014b9062000e96565b91505062000100565b50506200136c565b60805173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620001d157336040517f70fb936f000000000000000000000000000000000000000000000000000000008152600401620001c8919062000f09565b60405180910390fd5b6007600081819054906101000a900460ff1680929190620001f29062000e96565b91906101000a81548160ff021916908360ff160217905550506000620002246008620002a460201b62000b0a1760201c565b90506200023d6008620002b260201b62000b181760201c565b6200024f3382620002c860201b60201c565b620002618183620002ee60201b60201c565b7feadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d8242338460405162000298949392919062000f89565b60405180910390a15050565b600081600001549050919050565b6001816000016000828254019250508190555050565b620002ea8282604051806020016040528060008152506200036860201b60201c565b5050565b620002ff82620003d660201b60201c565b62000341576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003389062001053565b60405180910390fd5b8060066000848152602001908152602001600020908162000363919062000d44565b505050565b6200037a83836200044260201b60201c565b6200038f60008484846200063b60201b60201c565b620003d1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003c890620010eb565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620004b4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004ab906200115d565b60405180910390fd5b620004c581620003d660201b60201c565b1562000508576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004ff90620011cf565b60405180910390fd5b6200051c60008383620007e460201b60201c565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200056e9190620011f1565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46200063760008383620007e960201b60201c565b5050565b6000620006698473ffffffffffffffffffffffffffffffffffffffff16620007ee60201b62000b2e1760201c565b15620007d7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026200069b6200081160201b60201c565b8786866040518563ffffffff1660e01b8152600401620006bf949392919062001289565b6020604051808303816000875af1925050508015620006fe57506040513d601f19601f82011682018060405250810190620006fb91906200133a565b60015b62000786573d806000811462000731576040519150601f19603f3d011682016040523d82523d6000602084013e62000736565b606091505b5060008151036200077e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200077590620010eb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050620007dc565b600190505b949350505050565b505050565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200087d8262000832565b810181811067ffffffffffffffff821117156200089f576200089e62000843565b5b80604052505050565b6000620008b462000819565b9050620008c2828262000872565b919050565b600067ffffffffffffffff821115620008e557620008e462000843565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff8211156200091e576200091d62000843565b5b620009298262000832565b9050602081019050919050565b60005b838110156200095657808201518184015260208101905062000939565b60008484015250505050565b600062000979620009738462000900565b620008a8565b905082815260208101848484011115620009985762000997620008fb565b5b620009a584828562000936565b509392505050565b600082601f830112620009c557620009c46200082d565b5b8151620009d784826020860162000962565b91505092915050565b6000620009f7620009f184620008c7565b620008a8565b9050808382526020820190506020840283018581111562000a1d5762000a1c620008f6565b5b835b8181101562000a6b57805167ffffffffffffffff81111562000a465762000a456200082d565b5b80860162000a558982620009ad565b8552602085019450505060208101905062000a1f565b5050509392505050565b600082601f83011262000a8d5762000a8c6200082d565b5b815162000a9f848260208601620009e0565b91505092915050565b60006020828403121562000ac15762000ac062000823565b5b600082015167ffffffffffffffff81111562000ae25762000ae162000828565b5b62000af08482850162000a75565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b4c57607f821691505b60208210810362000b625762000b6162000b04565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000bcc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000b8d565b62000bd8868362000b8d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000c2562000c1f62000c198462000bf0565b62000bfa565b62000bf0565b9050919050565b6000819050919050565b62000c418362000c04565b62000c5962000c508262000c2c565b84845462000b9a565b825550505050565b600090565b62000c7062000c61565b62000c7d81848462000c36565b505050565b5b8181101562000ca55762000c9960008262000c66565b60018101905062000c83565b5050565b601f82111562000cf45762000cbe8162000b68565b62000cc98462000b7d565b8101602085101562000cd9578190505b62000cf162000ce88562000b7d565b83018262000c82565b50505b505050565b600082821c905092915050565b600062000d196000198460080262000cf9565b1980831691505092915050565b600062000d34838362000d06565b9150826002028217905092915050565b62000d4f8262000af9565b67ffffffffffffffff81111562000d6b5762000d6a62000843565b5b62000d77825462000b33565b62000d8482828562000ca9565b600060209050601f83116001811462000dbc576000841562000da7578287015190505b62000db3858262000d26565b86555062000e23565b601f19841662000dcc8662000b68565b60005b8281101562000df65784890151825560018201915060208501945060208101905062000dcf565b8683101562000e16578489015162000e12601f89168262000d06565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600062000ea38262000e89565b915060ff820362000eb95762000eb862000e5a565b5b600182019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ef18262000ec4565b9050919050565b62000f038162000ee4565b82525050565b600060208201905062000f20600083018462000ef8565b92915050565b600082825260208201905092915050565b600062000f448262000af9565b62000f50818562000f26565b935062000f6281856020860162000936565b62000f6d8162000832565b840191505092915050565b62000f838162000bf0565b82525050565b6000608082019050818103600083015262000fa5818762000f37565b905062000fb6602083018662000f78565b62000fc5604083018562000ef8565b62000fd4606083018462000f78565b95945050505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006200103b602e8362000f26565b9150620010488262000fdd565b604082019050919050565b600060208201905081810360008301526200106e816200102c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000620010d360328362000f26565b9150620010e08262001075565b604082019050919050565b600060208201905081810360008301526200110681620010c4565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006200114560208362000f26565b915062001152826200110d565b602082019050919050565b60006020820190508181036000830152620011788162001136565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000620011b7601c8362000f26565b9150620011c4826200117f565b602082019050919050565b60006020820190508181036000830152620011ea81620011a8565b9050919050565b6000620011fe8262000bf0565b91506200120b8362000bf0565b925082820190508082111562001226576200122562000e5a565b5b92915050565b600081519050919050565b600082825260208201905092915050565b600062001255826200122c565b62001261818562001237565b93506200127381856020860162000936565b6200127e8162000832565b840191505092915050565b6000608082019050620012a0600083018762000ef8565b620012af602083018662000ef8565b620012be604083018562000f78565b8181036060830152620012d2818462001248565b905095945050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200131481620012dd565b81146200132057600080fd5b50565b600081519050620013348162001309565b92915050565b60006020828403121562001353576200135262000823565b5b6000620013638482850162001323565b91505092915050565b608051612cbd6200138860003960006106bf0152612cbd6000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c806345576f9411610097578063a22cb46511610066578063a22cb465146102ac578063b88d4fde146102c8578063c87b56dd146102e4578063e985e9c514610314576100ff565b806345576f94146102125780636352211e1461022e57806370a082311461025e57806395d89b411461028e576100ff565b8063095ea7b3116100d3578063095ea7b3146101a057806309e1728e146101bc57806323b872dd146101da57806342842e0e146101f6576100ff565b80629a9b7b1461010457806301ffc9a71461012257806306fdde0314610152578063081812fc14610170575b600080fd5b61010c610344565b6040516101199190611950565b60405180910390f35b61013c600480360381019061013791906119d7565b610355565b6040516101499190611a1f565b60405180910390f35b61015a610437565b6040516101679190611aca565b60405180910390f35b61018a60048036038101906101859190611b18565b6104c9565b6040516101979190611b86565b60405180910390f35b6101ba60048036038101906101b59190611bcd565b61050f565b005b6101c4610626565b6040516101d19190611c29565b60405180910390f35b6101f460048036038101906101ef9190611c44565b61063d565b005b610210600480360381019061020b9190611c44565b61069d565b005b61022c60048036038101906102279190611dcc565b6106bd565b005b61024860048036038101906102439190611b18565b6107f2565b6040516102559190611b86565b60405180910390f35b61027860048036038101906102739190611e15565b6108a3565b6040516102859190611950565b60405180910390f35b61029661095a565b6040516102a39190611aca565b60405180910390f35b6102c660048036038101906102c19190611e6e565b6109ec565b005b6102e260048036038101906102dd9190611f4f565b610a02565b005b6102fe60048036038101906102f99190611b18565b610a64565b60405161030b9190611aca565b60405180910390f35b61032e60048036038101906103299190611fd2565b610a76565b60405161033b9190611a1f565b60405180910390f35b60006103506008610b0a565b905090565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610430575061042f82610b51565b5b9050919050565b60606000805461044690612041565b80601f016020809104026020016040519081016040528092919081815260200182805461047290612041565b80156104bf5780601f10610494576101008083540402835291602001916104bf565b820191906000526020600020905b8154815290600101906020018083116104a257829003601f168201915b5050505050905090565b60006104d482610bbb565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061051a826107f2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361058a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610581906120e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105a9610c06565b73ffffffffffffffffffffffffffffffffffffffff1614806105d857506105d7816105d2610c06565b610a76565b5b610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90612176565b60405180910390fd5b6106218383610c0e565b505050565b6000600760009054906101000a900460ff16905090565b61064e610648610c06565b82610cc7565b61068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068490612208565b60405180910390fd5b610698838383610d5c565b505050565b6106b883838360405180602001604052806000815250610a02565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074d57336040517f70fb936f0000000000000000000000000000000000000000000000000000000081526004016107449190611b86565b60405180910390fd5b6007600081819054906101000a900460ff168092919061076c90612257565b91906101000a81548160ff021916908360ff1602179055505060006107916008610b0a565b905061079d6008610b18565b6107a73382610fc2565b6107b18183610fe0565b7feadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d824233846040516107e69493929190612280565b60405180910390a15050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361089a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089190612318565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a906123aa565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461096990612041565b80601f016020809104026020016040519081016040528092919081815260200182805461099590612041565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b5050505050905090565b6109fe6109f7610c06565b838361104d565b5050565b610a13610a0d610c06565b83610cc7565b610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4990612208565b60405180910390fd5b610a5e848484846111b9565b50505050565b6060610a6f82611215565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bc481611327565b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa90612318565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610c81836107f2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610cd3836107f2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d155750610d148185610a76565b5b80610d5357508373ffffffffffffffffffffffffffffffffffffffff16610d3b846104c9565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610d7c826107f2565b73ffffffffffffffffffffffffffffffffffffffff1614610dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc99061243c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e38906124ce565b60405180910390fd5b610e4c838383611393565b610e57600082610c0e565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ea791906124ee565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610efe9190612522565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610fbd838383611398565b505050565b610fdc82826040518060200160405280600081525061139d565b5050565b610fe982611327565b611028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101f906125c8565b60405180910390fd5b806006600084815260200190815260200160002090816110489190612794565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b2906128b2565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111ac9190611a1f565b60405180910390a3505050565b6111c4848484610d5c565b6111d0848484846113f8565b61120f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120690612944565b60405180910390fd5b50505050565b606061122082610bbb565b600060066000848152602001908152602001600020805461124090612041565b80601f016020809104026020016040519081016040528092919081815260200182805461126c90612041565b80156112b95780601f1061128e576101008083540402835291602001916112b9565b820191906000526020600020905b81548152906001019060200180831161129c57829003601f168201915b5050505050905060006112ca61157f565b905060008151036112df578192505050611322565b6000825111156113145780826040516020016112fc9291906129a0565b60405160208183030381529060405292505050611322565b61131d84611596565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6113a783836115fe565b6113b460008484846113f8565b6113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90612944565b60405180910390fd5b505050565b60006114198473ffffffffffffffffffffffffffffffffffffffff16610b2e565b15611572578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611442610c06565b8786866040518563ffffffff1660e01b81526004016114649493929190612a19565b6020604051808303816000875af19250505080156114a057506040513d601f19601f8201168201806040525081019061149d9190612a7a565b60015b611522573d80600081146114d0576040519150601f19603f3d011682016040523d82523d6000602084013e6114d5565b606091505b50600081510361151a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151190612944565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611577565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606115a182610bbb565b60006115ab61157f565b905060008151116115cb57604051806020016040528060008152506115f6565b806115d5846117d7565b6040516020016115e69291906129a0565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361166d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166490612af3565b60405180910390fd5b61167681611327565b156116b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ad90612b5f565b60405180910390fd5b6116c260008383611393565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117129190612522565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117d360008383611398565b5050565b60606000820361181e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611932565b600082905060005b6000821461185057808061183990612b7f565b915050600a826118499190612bf6565b9150611826565b60008167ffffffffffffffff81111561186c5761186b611ca1565b5b6040519080825280601f01601f19166020018201604052801561189e5781602001600182028036833780820191505090505b5090505b6000851461192b576001826118b791906124ee565b9150600a856118c69190612c27565b60306118d29190612522565b60f81b8183815181106118e8576118e7612c58565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119249190612bf6565b94506118a2565b8093505050505b919050565b6000819050919050565b61194a81611937565b82525050565b60006020820190506119656000830184611941565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6119b48161197f565b81146119bf57600080fd5b50565b6000813590506119d1816119ab565b92915050565b6000602082840312156119ed576119ec611975565b5b60006119fb848285016119c2565b91505092915050565b60008115159050919050565b611a1981611a04565b82525050565b6000602082019050611a346000830184611a10565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a74578082015181840152602081019050611a59565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a9c82611a3a565b611aa68185611a45565b9350611ab6818560208601611a56565b611abf81611a80565b840191505092915050565b60006020820190508181036000830152611ae48184611a91565b905092915050565b611af581611937565b8114611b0057600080fd5b50565b600081359050611b1281611aec565b92915050565b600060208284031215611b2e57611b2d611975565b5b6000611b3c84828501611b03565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b7082611b45565b9050919050565b611b8081611b65565b82525050565b6000602082019050611b9b6000830184611b77565b92915050565b611baa81611b65565b8114611bb557600080fd5b50565b600081359050611bc781611ba1565b92915050565b60008060408385031215611be457611be3611975565b5b6000611bf285828601611bb8565b9250506020611c0385828601611b03565b9150509250929050565b600060ff82169050919050565b611c2381611c0d565b82525050565b6000602082019050611c3e6000830184611c1a565b92915050565b600080600060608486031215611c5d57611c5c611975565b5b6000611c6b86828701611bb8565b9350506020611c7c86828701611bb8565b9250506040611c8d86828701611b03565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611cd982611a80565b810181811067ffffffffffffffff82111715611cf857611cf7611ca1565b5b80604052505050565b6000611d0b61196b565b9050611d178282611cd0565b919050565b600067ffffffffffffffff821115611d3757611d36611ca1565b5b611d4082611a80565b9050602081019050919050565b82818337600083830152505050565b6000611d6f611d6a84611d1c565b611d01565b905082815260208101848484011115611d8b57611d8a611c9c565b5b611d96848285611d4d565b509392505050565b600082601f830112611db357611db2611c97565b5b8135611dc3848260208601611d5c565b91505092915050565b600060208284031215611de257611de1611975565b5b600082013567ffffffffffffffff811115611e0057611dff61197a565b5b611e0c84828501611d9e565b91505092915050565b600060208284031215611e2b57611e2a611975565b5b6000611e3984828501611bb8565b91505092915050565b611e4b81611a04565b8114611e5657600080fd5b50565b600081359050611e6881611e42565b92915050565b60008060408385031215611e8557611e84611975565b5b6000611e9385828601611bb8565b9250506020611ea485828601611e59565b9150509250929050565b600067ffffffffffffffff821115611ec957611ec8611ca1565b5b611ed282611a80565b9050602081019050919050565b6000611ef2611eed84611eae565b611d01565b905082815260208101848484011115611f0e57611f0d611c9c565b5b611f19848285611d4d565b509392505050565b600082601f830112611f3657611f35611c97565b5b8135611f46848260208601611edf565b91505092915050565b60008060008060808587031215611f6957611f68611975565b5b6000611f7787828801611bb8565b9450506020611f8887828801611bb8565b9350506040611f9987828801611b03565b925050606085013567ffffffffffffffff811115611fba57611fb961197a565b5b611fc687828801611f21565b91505092959194509250565b60008060408385031215611fe957611fe8611975565b5b6000611ff785828601611bb8565b925050602061200885828601611bb8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061205957607f821691505b60208210810361206c5761206b612012565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006120ce602183611a45565b91506120d982612072565b604082019050919050565b600060208201905081810360008301526120fd816120c1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612160603e83611a45565b915061216b82612104565b604082019050919050565b6000602082019050818103600083015261218f81612153565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006121f2602e83611a45565b91506121fd82612196565b604082019050919050565b60006020820190508181036000830152612221816121e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061226282611c0d565b915060ff820361227557612274612228565b5b600182019050919050565b6000608082019050818103600083015261229a8187611a91565b90506122a96020830186611941565b6122b66040830185611b77565b6122c36060830184611941565b95945050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612302601883611a45565b915061230d826122cc565b602082019050919050565b60006020820190508181036000830152612331816122f5565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612394602983611a45565b915061239f82612338565b604082019050919050565b600060208201905081810360008301526123c381612387565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612426602583611a45565b9150612431826123ca565b604082019050919050565b6000602082019050818103600083015261245581612419565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006124b8602483611a45565b91506124c38261245c565b604082019050919050565b600060208201905081810360008301526124e7816124ab565b9050919050565b60006124f982611937565b915061250483611937565b925082820390508181111561251c5761251b612228565b5b92915050565b600061252d82611937565b915061253883611937565b92508282019050808211156125505761254f612228565b5b92915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006125b2602e83611a45565b91506125bd82612556565b604082019050919050565b600060208201905081810360008301526125e1816125a5565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261264a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261260d565b612654868361260d565b95508019841693508086168417925050509392505050565b6000819050919050565b600061269161268c61268784611937565b61266c565b611937565b9050919050565b6000819050919050565b6126ab83612676565b6126bf6126b782612698565b84845461261a565b825550505050565b600090565b6126d46126c7565b6126df8184846126a2565b505050565b5b81811015612703576126f86000826126cc565b6001810190506126e5565b5050565b601f82111561274857612719816125e8565b612722846125fd565b81016020851015612731578190505b61274561273d856125fd565b8301826126e4565b50505b505050565b600082821c905092915050565b600061276b6000198460080261274d565b1980831691505092915050565b6000612784838361275a565b9150826002028217905092915050565b61279d82611a3a565b67ffffffffffffffff8111156127b6576127b5611ca1565b5b6127c08254612041565b6127cb828285612707565b600060209050601f8311600181146127fe57600084156127ec578287015190505b6127f68582612778565b86555061285e565b601f19841661280c866125e8565b60005b828110156128345784890151825560018201915060208501945060208101905061280f565b86831015612851578489015161284d601f89168261275a565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061289c601983611a45565b91506128a782612866565b602082019050919050565b600060208201905081810360008301526128cb8161288f565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061292e603283611a45565b9150612939826128d2565b604082019050919050565b6000602082019050818103600083015261295d81612921565b9050919050565b600081905092915050565b600061297a82611a3a565b6129848185612964565b9350612994818560208601611a56565b80840191505092915050565b60006129ac828561296f565b91506129b8828461296f565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b60006129eb826129c4565b6129f581856129cf565b9350612a05818560208601611a56565b612a0e81611a80565b840191505092915050565b6000608082019050612a2e6000830187611b77565b612a3b6020830186611b77565b612a486040830185611941565b8181036060830152612a5a81846129e0565b905095945050505050565b600081519050612a74816119ab565b92915050565b600060208284031215612a9057612a8f611975565b5b6000612a9e84828501612a65565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612add602083611a45565b9150612ae882612aa7565b602082019050919050565b60006020820190508181036000830152612b0c81612ad0565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612b49601c83611a45565b9150612b5482612b13565b602082019050919050565b60006020820190508181036000830152612b7881612b3c565b9050919050565b6000612b8a82611937565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bbc57612bbb612228565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c0182611937565b9150612c0c83611937565b925082612c1c57612c1b612bc7565b5b828204905092915050565b6000612c3282611937565b9150612c3d83611937565b925082612c4d57612c4c612bc7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212200b1cd2bb86e9f19f0274ee4d090280d82d761801af551c955cadbcace2b153a864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ff5760003560e01c806345576f9411610097578063a22cb46511610066578063a22cb465146102ac578063b88d4fde146102c8578063c87b56dd146102e4578063e985e9c514610314576100ff565b806345576f94146102125780636352211e1461022e57806370a082311461025e57806395d89b411461028e576100ff565b8063095ea7b3116100d3578063095ea7b3146101a057806309e1728e146101bc57806323b872dd146101da57806342842e0e146101f6576100ff565b80629a9b7b1461010457806301ffc9a71461012257806306fdde0314610152578063081812fc14610170575b600080fd5b61010c610344565b6040516101199190611950565b60405180910390f35b61013c600480360381019061013791906119d7565b610355565b6040516101499190611a1f565b60405180910390f35b61015a610437565b6040516101679190611aca565b60405180910390f35b61018a60048036038101906101859190611b18565b6104c9565b6040516101979190611b86565b60405180910390f35b6101ba60048036038101906101b59190611bcd565b61050f565b005b6101c4610626565b6040516101d19190611c29565b60405180910390f35b6101f460048036038101906101ef9190611c44565b61063d565b005b610210600480360381019061020b9190611c44565b61069d565b005b61022c60048036038101906102279190611dcc565b6106bd565b005b61024860048036038101906102439190611b18565b6107f2565b6040516102559190611b86565b60405180910390f35b61027860048036038101906102739190611e15565b6108a3565b6040516102859190611950565b60405180910390f35b61029661095a565b6040516102a39190611aca565b60405180910390f35b6102c660048036038101906102c19190611e6e565b6109ec565b005b6102e260048036038101906102dd9190611f4f565b610a02565b005b6102fe60048036038101906102f99190611b18565b610a64565b60405161030b9190611aca565b60405180910390f35b61032e60048036038101906103299190611fd2565b610a76565b60405161033b9190611a1f565b60405180910390f35b60006103506008610b0a565b905090565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061042057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610430575061042f82610b51565b5b9050919050565b60606000805461044690612041565b80601f016020809104026020016040519081016040528092919081815260200182805461047290612041565b80156104bf5780601f10610494576101008083540402835291602001916104bf565b820191906000526020600020905b8154815290600101906020018083116104a257829003601f168201915b5050505050905090565b60006104d482610bbb565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061051a826107f2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361058a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610581906120e4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105a9610c06565b73ffffffffffffffffffffffffffffffffffffffff1614806105d857506105d7816105d2610c06565b610a76565b5b610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90612176565b60405180910390fd5b6106218383610c0e565b505050565b6000600760009054906101000a900460ff16905090565b61064e610648610c06565b82610cc7565b61068d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068490612208565b60405180910390fd5b610698838383610d5c565b505050565b6106b883838360405180602001604052806000815250610a02565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074d57336040517f70fb936f0000000000000000000000000000000000000000000000000000000081526004016107449190611b86565b60405180910390fd5b6007600081819054906101000a900460ff168092919061076c90612257565b91906101000a81548160ff021916908360ff1602179055505060006107916008610b0a565b905061079d6008610b18565b6107a73382610fc2565b6107b18183610fe0565b7feadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d824233846040516107e69493929190612280565b60405180910390a15050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361089a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089190612318565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a906123aa565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461096990612041565b80601f016020809104026020016040519081016040528092919081815260200182805461099590612041565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b5050505050905090565b6109fe6109f7610c06565b838361104d565b5050565b610a13610a0d610c06565b83610cc7565b610a52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4990612208565b60405180910390fd5b610a5e848484846111b9565b50505050565b6060610a6f82611215565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610bc481611327565b610c03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfa90612318565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610c81836107f2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610cd3836107f2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610d155750610d148185610a76565b5b80610d5357508373ffffffffffffffffffffffffffffffffffffffff16610d3b846104c9565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610d7c826107f2565b73ffffffffffffffffffffffffffffffffffffffff1614610dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc99061243c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e38906124ce565b60405180910390fd5b610e4c838383611393565b610e57600082610c0e565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ea791906124ee565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610efe9190612522565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610fbd838383611398565b505050565b610fdc82826040518060200160405280600081525061139d565b5050565b610fe982611327565b611028576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101f906125c8565b60405180910390fd5b806006600084815260200190815260200160002090816110489190612794565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b2906128b2565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111ac9190611a1f565b60405180910390a3505050565b6111c4848484610d5c565b6111d0848484846113f8565b61120f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120690612944565b60405180910390fd5b50505050565b606061122082610bbb565b600060066000848152602001908152602001600020805461124090612041565b80601f016020809104026020016040519081016040528092919081815260200182805461126c90612041565b80156112b95780601f1061128e576101008083540402835291602001916112b9565b820191906000526020600020905b81548152906001019060200180831161129c57829003601f168201915b5050505050905060006112ca61157f565b905060008151036112df578192505050611322565b6000825111156113145780826040516020016112fc9291906129a0565b60405160208183030381529060405292505050611322565b61131d84611596565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6113a783836115fe565b6113b460008484846113f8565b6113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90612944565b60405180910390fd5b505050565b60006114198473ffffffffffffffffffffffffffffffffffffffff16610b2e565b15611572578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611442610c06565b8786866040518563ffffffff1660e01b81526004016114649493929190612a19565b6020604051808303816000875af19250505080156114a057506040513d601f19601f8201168201806040525081019061149d9190612a7a565b60015b611522573d80600081146114d0576040519150601f19603f3d011682016040523d82523d6000602084013e6114d5565b606091505b50600081510361151a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151190612944565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611577565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606115a182610bbb565b60006115ab61157f565b905060008151116115cb57604051806020016040528060008152506115f6565b806115d5846117d7565b6040516020016115e69291906129a0565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361166d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166490612af3565b60405180910390fd5b61167681611327565b156116b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ad90612b5f565b60405180910390fd5b6116c260008383611393565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117129190612522565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117d360008383611398565b5050565b60606000820361181e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611932565b600082905060005b6000821461185057808061183990612b7f565b915050600a826118499190612bf6565b9150611826565b60008167ffffffffffffffff81111561186c5761186b611ca1565b5b6040519080825280601f01601f19166020018201604052801561189e5781602001600182028036833780820191505090505b5090505b6000851461192b576001826118b791906124ee565b9150600a856118c69190612c27565b60306118d29190612522565b60f81b8183815181106118e8576118e7612c58565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119249190612bf6565b94506118a2565b8093505050505b919050565b6000819050919050565b61194a81611937565b82525050565b60006020820190506119656000830184611941565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6119b48161197f565b81146119bf57600080fd5b50565b6000813590506119d1816119ab565b92915050565b6000602082840312156119ed576119ec611975565b5b60006119fb848285016119c2565b91505092915050565b60008115159050919050565b611a1981611a04565b82525050565b6000602082019050611a346000830184611a10565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a74578082015181840152602081019050611a59565b60008484015250505050565b6000601f19601f8301169050919050565b6000611a9c82611a3a565b611aa68185611a45565b9350611ab6818560208601611a56565b611abf81611a80565b840191505092915050565b60006020820190508181036000830152611ae48184611a91565b905092915050565b611af581611937565b8114611b0057600080fd5b50565b600081359050611b1281611aec565b92915050565b600060208284031215611b2e57611b2d611975565b5b6000611b3c84828501611b03565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b7082611b45565b9050919050565b611b8081611b65565b82525050565b6000602082019050611b9b6000830184611b77565b92915050565b611baa81611b65565b8114611bb557600080fd5b50565b600081359050611bc781611ba1565b92915050565b60008060408385031215611be457611be3611975565b5b6000611bf285828601611bb8565b9250506020611c0385828601611b03565b9150509250929050565b600060ff82169050919050565b611c2381611c0d565b82525050565b6000602082019050611c3e6000830184611c1a565b92915050565b600080600060608486031215611c5d57611c5c611975565b5b6000611c6b86828701611bb8565b9350506020611c7c86828701611bb8565b9250506040611c8d86828701611b03565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611cd982611a80565b810181811067ffffffffffffffff82111715611cf857611cf7611ca1565b5b80604052505050565b6000611d0b61196b565b9050611d178282611cd0565b919050565b600067ffffffffffffffff821115611d3757611d36611ca1565b5b611d4082611a80565b9050602081019050919050565b82818337600083830152505050565b6000611d6f611d6a84611d1c565b611d01565b905082815260208101848484011115611d8b57611d8a611c9c565b5b611d96848285611d4d565b509392505050565b600082601f830112611db357611db2611c97565b5b8135611dc3848260208601611d5c565b91505092915050565b600060208284031215611de257611de1611975565b5b600082013567ffffffffffffffff811115611e0057611dff61197a565b5b611e0c84828501611d9e565b91505092915050565b600060208284031215611e2b57611e2a611975565b5b6000611e3984828501611bb8565b91505092915050565b611e4b81611a04565b8114611e5657600080fd5b50565b600081359050611e6881611e42565b92915050565b60008060408385031215611e8557611e84611975565b5b6000611e9385828601611bb8565b9250506020611ea485828601611e59565b9150509250929050565b600067ffffffffffffffff821115611ec957611ec8611ca1565b5b611ed282611a80565b9050602081019050919050565b6000611ef2611eed84611eae565b611d01565b905082815260208101848484011115611f0e57611f0d611c9c565b5b611f19848285611d4d565b509392505050565b600082601f830112611f3657611f35611c97565b5b8135611f46848260208601611edf565b91505092915050565b60008060008060808587031215611f6957611f68611975565b5b6000611f7787828801611bb8565b9450506020611f8887828801611bb8565b9350506040611f9987828801611b03565b925050606085013567ffffffffffffffff811115611fba57611fb961197a565b5b611fc687828801611f21565b91505092959194509250565b60008060408385031215611fe957611fe8611975565b5b6000611ff785828601611bb8565b925050602061200885828601611bb8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061205957607f821691505b60208210810361206c5761206b612012565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006120ce602183611a45565b91506120d982612072565b604082019050919050565b600060208201905081810360008301526120fd816120c1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000612160603e83611a45565b915061216b82612104565b604082019050919050565b6000602082019050818103600083015261218f81612153565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006121f2602e83611a45565b91506121fd82612196565b604082019050919050565b60006020820190508181036000830152612221816121e5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061226282611c0d565b915060ff820361227557612274612228565b5b600182019050919050565b6000608082019050818103600083015261229a8187611a91565b90506122a96020830186611941565b6122b66040830185611b77565b6122c36060830184611941565b95945050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612302601883611a45565b915061230d826122cc565b602082019050919050565b60006020820190508181036000830152612331816122f5565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612394602983611a45565b915061239f82612338565b604082019050919050565b600060208201905081810360008301526123c381612387565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612426602583611a45565b9150612431826123ca565b604082019050919050565b6000602082019050818103600083015261245581612419565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006124b8602483611a45565b91506124c38261245c565b604082019050919050565b600060208201905081810360008301526124e7816124ab565b9050919050565b60006124f982611937565b915061250483611937565b925082820390508181111561251c5761251b612228565b5b92915050565b600061252d82611937565b915061253883611937565b92508282019050808211156125505761254f612228565b5b92915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b60006125b2602e83611a45565b91506125bd82612556565b604082019050919050565b600060208201905081810360008301526125e1816125a5565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261264a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261260d565b612654868361260d565b95508019841693508086168417925050509392505050565b6000819050919050565b600061269161268c61268784611937565b61266c565b611937565b9050919050565b6000819050919050565b6126ab83612676565b6126bf6126b782612698565b84845461261a565b825550505050565b600090565b6126d46126c7565b6126df8184846126a2565b505050565b5b81811015612703576126f86000826126cc565b6001810190506126e5565b5050565b601f82111561274857612719816125e8565b612722846125fd565b81016020851015612731578190505b61274561273d856125fd565b8301826126e4565b50505b505050565b600082821c905092915050565b600061276b6000198460080261274d565b1980831691505092915050565b6000612784838361275a565b9150826002028217905092915050565b61279d82611a3a565b67ffffffffffffffff8111156127b6576127b5611ca1565b5b6127c08254612041565b6127cb828285612707565b600060209050601f8311600181146127fe57600084156127ec578287015190505b6127f68582612778565b86555061285e565b601f19841661280c866125e8565b60005b828110156128345784890151825560018201915060208501945060208101905061280f565b86831015612851578489015161284d601f89168261275a565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061289c601983611a45565b91506128a782612866565b602082019050919050565b600060208201905081810360008301526128cb8161288f565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061292e603283611a45565b9150612939826128d2565b604082019050919050565b6000602082019050818103600083015261295d81612921565b9050919050565b600081905092915050565b600061297a82611a3a565b6129848185612964565b9350612994818560208601611a56565b80840191505092915050565b60006129ac828561296f565b91506129b8828461296f565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b60006129eb826129c4565b6129f581856129cf565b9350612a05818560208601611a56565b612a0e81611a80565b840191505092915050565b6000608082019050612a2e6000830187611b77565b612a3b6020830186611b77565b612a486040830185611941565b8181036060830152612a5a81846129e0565b905095945050505050565b600081519050612a74816119ab565b92915050565b600060208284031215612a9057612a8f611975565b5b6000612a9e84828501612a65565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612add602083611a45565b9150612ae882612aa7565b602082019050919050565b60006020820190508181036000830152612b0c81612ad0565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612b49601c83611a45565b9150612b5482612b13565b602082019050919050565b60006020820190508181036000830152612b7881612b3c565b9050919050565b6000612b8a82611937565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612bbc57612bbb612228565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612c0182611937565b9150612c0c83611937565b925082612c1c57612c1b612bc7565b5b828204905092915050565b6000612c3282611937565b9150612c3d83611937565b925082612c4d57612c4c612bc7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212200b1cd2bb86e9f19f0274ee4d090280d82d761801af551c955cadbcace2b153a864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1013,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1826,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "s_TotalNFTs",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 1829,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "s_tokenIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)1475_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1475_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1474,
            "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
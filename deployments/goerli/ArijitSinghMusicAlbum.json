{
  "address": "0x095884F8BC11dCf23023de065fCf678601D646c7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "tokenURIs",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "artist",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ERC721_NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NFTCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionNFTCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getArtistImage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7038eb630dfa2184bf5b984d7d71ed62c52d0252a7f444b9078eae938ec02e98",
  "receipt": {
    "to": null,
    "from": "0x6A00422C67579157C48A574E7064c2B856fc14f3",
    "contractAddress": "0x095884F8BC11dCf23023de065fCf678601D646c7",
    "transactionIndex": 27,
    "gasUsed": "3007244",
    "logsBloom": "0x
    "blockHash": "0x810b3251f0ac49a612ff7ea5f280fed16733390da20f2b199b74afae73ce25c0",
    "transactionHash": "0x7038eb630dfa2184bf5b984d7d71ed62c52d0252a7f444b9078eae938ec02e98",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 7666952,
        "transactionHash": "0x7038eb630dfa2184bf5b984d7d71ed62c52d0252a7f444b9078eae938ec02e98",
        "address": "0x095884F8BC11dCf23023de065fCf678601D646c7",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006a00422c67579157c48a574e7064c2b856fc14f3",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x810b3251f0ac49a612ff7ea5f280fed16733390da20f2b199b74afae73ce25c0"
      },
      {
        "transactionIndex": 27,
        "blockNumber": 7666952,
        "transactionHash": "0x7038eb630dfa2184bf5b984d7d71ed62c52d0252a7f444b9078eae938ec02e98",
        "address": "0x095884F8BC11dCf23023de065fCf678601D646c7",
        "topics": [
          "0xeadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000006332817c0000000000000000000000006a00422c67579157c48a574e7064c2b856fc14f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e516d55436f656953373256534e435869447a43777a694b4e716a634d38414d33754338675972444e56377a744148000000000000000000000000000000000000",
        "logIndex": 78,
        "blockHash": "0x810b3251f0ac49a612ff7ea5f280fed16733390da20f2b199b74afae73ce25c0"
      },
      {
        "transactionIndex": 27,
        "blockNumber": 7666952,
        "transactionHash": "0x7038eb630dfa2184bf5b984d7d71ed62c52d0252a7f444b9078eae938ec02e98",
        "address": "0x095884F8BC11dCf23023de065fCf678601D646c7",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006a00422c67579157c48a574e7064c2b856fc14f3",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x810b3251f0ac49a612ff7ea5f280fed16733390da20f2b199b74afae73ce25c0"
      },
      {
        "transactionIndex": 27,
        "blockNumber": 7666952,
        "transactionHash": "0x7038eb630dfa2184bf5b984d7d71ed62c52d0252a7f444b9078eae938ec02e98",
        "address": "0x095884F8BC11dCf23023de065fCf678601D646c7",
        "topics": [
          "0xeadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000006332817c0000000000000000000000006a00422c67579157c48a574e7064c2b856fc14f30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002e516d5244696e64626b62685745776a654c643433694265653546643161564b553273594b4b314533787762556e7a000000000000000000000000000000000000",
        "logIndex": 80,
        "blockHash": "0x810b3251f0ac49a612ff7ea5f280fed16733390da20f2b199b74afae73ce25c0"
      }
    ],
    "blockNumber": 7666952,
    "cumulativeGasUsed": "7880487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "QmUCoeiS72VSNCXiDzCwziKNqjcM8AM3uC8gYrDNV7ztAH",
      "QmRDindbkbhWEwjeLd43iBee5Fd1aVKU2sYKK1E3xwbUnz"
    ],
    "ipfs://QmZDjQiSikd5mFf63JfC85BcZZujvUwNt76Qz7JYu6YqB1"
  ],
  "numDeployments": 1,
  "solcInputHash": "bdecc9c9d914365dbb427b827dc60f0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tokenURIs\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"artist\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ERC721_NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionNFTCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArtistImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftAlbum.sol\":\"ArijitSinghMusicAlbum\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NftAlbum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nerror ERC721_NotOwner(address);\\r\\n\\r\\ncontract ArijitSinghMusicAlbum is ERC721, ERC721URIStorage {\\r\\n  using Counters for Counters.Counter;\\r\\n  address private immutable i_owner;\\r\\n  uint8 private s_TotalNFTs;\\r\\n  Counters.Counter private s_tokenIds;\\r\\n  string private s_artist;\\r\\n\\r\\n  event NFTCreated(\\r\\n    string tokenURI,\\r\\n    uint256 timeStamp,\\r\\n    address owner,\\r\\n    uint256 tokenId\\r\\n  );\\r\\n\\r\\n  constructor(string[] memory tokenURIs, string memory artist)\\r\\n    ERC721(\\\"ArijitsinghMusicAlbum\\\", \\\"ASINGH\\\")\\r\\n  {\\r\\n    i_owner = msg.sender;\\r\\n    s_artist = artist;\\r\\n    for (uint8 i = 0; i < tokenURIs.length; i++) {\\r\\n      createToken(tokenURIs[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\r\\n    super._burn(tokenId);\\r\\n    s_TotalNFTs = 0;\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    override(ERC721, ERC721URIStorage)\\r\\n    returns (string memory)\\r\\n  {\\r\\n    return super.tokenURI(tokenId);\\r\\n  }\\r\\n\\r\\n  function createToken(string memory _tokenURI) public {\\r\\n    if (msg.sender != i_owner) {\\r\\n      revert ERC721_NotOwner(msg.sender);\\r\\n    }\\r\\n    s_TotalNFTs++;\\r\\n    uint256 currentId = s_tokenIds.current();\\r\\n    s_tokenIds.increment();\\r\\n    _safeMint(msg.sender, currentId);\\r\\n    _setTokenURI(currentId, _tokenURI);\\r\\n    emit NFTCreated(_tokenURI, block.timestamp, msg.sender, currentId);\\r\\n  }\\r\\n\\r\\n  //getter\\r\\n  function collectionNFTCount() public view returns (uint8) {\\r\\n    return s_TotalNFTs;\\r\\n  }\\r\\n\\r\\n  function currentTokenId() public view returns (uint256) {\\r\\n    return s_tokenIds.current();\\r\\n  }\\r\\n\\r\\n  function getArtistImage() public view returns (string memory) {\\r\\n    return s_artist;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xf90e2abca9f78f594f469bf64984465c0d8f935840fd903898bc72d46d80e86f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200414738038062004147833981810160405281019062000037919062000abb565b6040518060400160405280601581526020017f4172696a697473696e67684d75736963416c62756d00000000000000000000008152506040518060400160405280600681526020017f4153494e474800000000000000000000000000000000000000000000000000008152508160009081620000b4919062000d8b565b508060019081620000c6919062000d8b565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600990816200010e919062000d8b565b5060005b82518160ff161015620001665762000150838260ff16815181106200013c576200013b62000e72565b5b60200260200101516200016f60201b60201c565b80806200015d9062000edd565b91505062000112565b505050620013b3565b60805173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620001e457336040517f70fb936f000000000000000000000000000000000000000000000000000000008152600401620001db919062000f50565b60405180910390fd5b6007600081819054906101000a900460ff1680929190620002059062000edd565b91906101000a81548160ff021916908360ff160217905550506000620002376008620002b760201b62000bc51760201c565b9050620002506008620002c560201b62000bd31760201c565b620002623382620002db60201b60201c565b6200027481836200030160201b60201c565b7feadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d82423384604051620002ab949392919062000fd0565b60405180910390a15050565b600081600001549050919050565b6001816000016000828254019250508190555050565b620002fd8282604051806020016040528060008152506200037b60201b60201c565b5050565b6200031282620003e960201b60201c565b62000354576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034b906200109a565b60405180910390fd5b8060066000848152602001908152602001600020908162000376919062000d8b565b505050565b6200038d83836200045560201b60201c565b620003a260008484846200064e60201b60201c565b620003e4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003db9062001132565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620004c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004be90620011a4565b60405180910390fd5b620004d881620003e960201b60201c565b156200051b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005129062001216565b60405180910390fd5b6200052f60008383620007f760201b60201c565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000581919062001238565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46200064a60008383620007fc60201b60201c565b5050565b60006200067c8473ffffffffffffffffffffffffffffffffffffffff166200080160201b62000be91760201c565b15620007ea578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02620006ae6200082460201b60201c565b8786866040518563ffffffff1660e01b8152600401620006d29493929190620012d0565b6020604051808303816000875af19250505080156200071157506040513d601f19601f820116820180604052508101906200070e919062001381565b60015b62000799573d806000811462000744576040519150601f19603f3d011682016040523d82523d6000602084013e62000749565b606091505b50600081510362000791576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007889062001132565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050620007ef565b600190505b949350505050565b505050565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620008908262000845565b810181811067ffffffffffffffff82111715620008b257620008b162000856565b5b80604052505050565b6000620008c76200082c565b9050620008d5828262000885565b919050565b600067ffffffffffffffff821115620008f857620008f762000856565b5b602082029050602081019050919050565b600080fd5b600080fd5b600067ffffffffffffffff82111562000931576200093062000856565b5b6200093c8262000845565b9050602081019050919050565b60005b83811015620009695780820151818401526020810190506200094c565b60008484015250505050565b60006200098c620009868462000913565b620008bb565b905082815260208101848484011115620009ab57620009aa6200090e565b5b620009b884828562000949565b509392505050565b600082601f830112620009d857620009d762000840565b5b8151620009ea84826020860162000975565b91505092915050565b600062000a0a62000a0484620008da565b620008bb565b9050808382526020820190506020840283018581111562000a305762000a2f62000909565b5b835b8181101562000a7e57805167ffffffffffffffff81111562000a595762000a5862000840565b5b80860162000a688982620009c0565b8552602085019450505060208101905062000a32565b5050509392505050565b600082601f83011262000aa05762000a9f62000840565b5b815162000ab2848260208601620009f3565b91505092915050565b6000806040838503121562000ad55762000ad462000836565b5b600083015167ffffffffffffffff81111562000af65762000af56200083b565b5b62000b048582860162000a88565b925050602083015167ffffffffffffffff81111562000b285762000b276200083b565b5b62000b3685828601620009c0565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000b9357607f821691505b60208210810362000ba95762000ba862000b4b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000c137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000bd4565b62000c1f868362000bd4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000c6c62000c6662000c608462000c37565b62000c41565b62000c37565b9050919050565b6000819050919050565b62000c888362000c4b565b62000ca062000c978262000c73565b84845462000be1565b825550505050565b600090565b62000cb762000ca8565b62000cc481848462000c7d565b505050565b5b8181101562000cec5762000ce060008262000cad565b60018101905062000cca565b5050565b601f82111562000d3b5762000d058162000baf565b62000d108462000bc4565b8101602085101562000d20578190505b62000d3862000d2f8562000bc4565b83018262000cc9565b50505b505050565b600082821c905092915050565b600062000d606000198460080262000d40565b1980831691505092915050565b600062000d7b838362000d4d565b9150826002028217905092915050565b62000d968262000b40565b67ffffffffffffffff81111562000db25762000db162000856565b5b62000dbe825462000b7a565b62000dcb82828562000cf0565b600060209050601f83116001811462000e03576000841562000dee578287015190505b62000dfa858262000d6d565b86555062000e6a565b601f19841662000e138662000baf565b60005b8281101562000e3d5784890151825560018201915060208501945060208101905062000e16565b8683101562000e5d578489015162000e59601f89168262000d4d565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b600062000eea8262000ed0565b915060ff820362000f005762000eff62000ea1565b5b600182019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000f388262000f0b565b9050919050565b62000f4a8162000f2b565b82525050565b600060208201905062000f67600083018462000f3f565b92915050565b600082825260208201905092915050565b600062000f8b8262000b40565b62000f97818562000f6d565b935062000fa981856020860162000949565b62000fb48162000845565b840191505092915050565b62000fca8162000c37565b82525050565b6000608082019050818103600083015262000fec818762000f7e565b905062000ffd602083018662000fbf565b6200100c604083018562000f3f565b6200101b606083018462000fbf565b95945050505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600062001082602e8362000f6d565b91506200108f8262001024565b604082019050919050565b60006020820190508181036000830152620010b58162001073565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006200111a60328362000f6d565b91506200112782620010bc565b604082019050919050565b600060208201905081810360008301526200114d816200110b565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006200118c60208362000f6d565b9150620011998262001154565b602082019050919050565b60006020820190508181036000830152620011bf816200117d565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000620011fe601c8362000f6d565b91506200120b82620011c6565b602082019050919050565b600060208201905081810360008301526200123181620011ef565b9050919050565b6000620012458262000c37565b9150620012528362000c37565b92508282019050808211156200126d576200126c62000ea1565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006200129c8262001273565b620012a881856200127e565b9350620012ba81856020860162000949565b620012c58162000845565b840191505092915050565b6000608082019050620012e7600083018762000f3f565b620012f6602083018662000f3f565b62001305604083018562000fbf565b81810360608301526200131981846200128f565b905095945050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200135b8162001324565b81146200136757600080fd5b50565b6000815190506200137b8162001350565b92915050565b6000602082840312156200139a576200139962000836565b5b6000620013aa848285016200136a565b91505092915050565b608051612d78620013cf60003960006106e80152612d786000f3fe608060405234801561001057600080fd5b506004361061010a5760003560e01c806345576f94116100a257806395d89b411161007157806395d89b41146102b7578063a22cb465146102d5578063b88d4fde146102f1578063c87b56dd1461030d578063e985e9c51461033d5761010a565b806345576f941461021d5780636352211e1461023957806370a082311461026957806382d3614d146102995761010a565b8063095ea7b3116100de578063095ea7b3146101ab57806309e1728e146101c757806323b872dd146101e557806342842e0e146102015761010a565b80629a9b7b1461010f57806301ffc9a71461012d57806306fdde031461015d578063081812fc1461017b575b600080fd5b61011761036d565b6040516101249190611a0b565b60405180910390f35b61014760048036038101906101429190611a92565b61037e565b6040516101549190611ada565b60405180910390f35b610165610460565b6040516101729190611b85565b60405180910390f35b61019560048036038101906101909190611bd3565b6104f2565b6040516101a29190611c41565b60405180910390f35b6101c560048036038101906101c09190611c88565b610538565b005b6101cf61064f565b6040516101dc9190611ce4565b60405180910390f35b6101ff60048036038101906101fa9190611cff565b610666565b005b61021b60048036038101906102169190611cff565b6106c6565b005b61023760048036038101906102329190611e87565b6106e6565b005b610253600480360381019061024e9190611bd3565b61081b565b6040516102609190611c41565b60405180910390f35b610283600480360381019061027e9190611ed0565b6108cc565b6040516102909190611a0b565b60405180910390f35b6102a1610983565b6040516102ae9190611b85565b60405180910390f35b6102bf610a15565b6040516102cc9190611b85565b60405180910390f35b6102ef60048036038101906102ea9190611f29565b610aa7565b005b61030b6004803603810190610306919061200a565b610abd565b005b61032760048036038101906103229190611bd3565b610b1f565b6040516103349190611b85565b60405180910390f35b6103576004803603810190610352919061208d565b610b31565b6040516103649190611ada565b60405180910390f35b60006103796008610bc5565b905090565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610459575061045882610c0c565b5b9050919050565b60606000805461046f906120fc565b80601f016020809104026020016040519081016040528092919081815260200182805461049b906120fc565b80156104e85780601f106104bd576101008083540402835291602001916104e8565b820191906000526020600020905b8154815290600101906020018083116104cb57829003601f168201915b5050505050905090565b60006104fd82610c76565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105438261081b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa9061219f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105d2610cc1565b73ffffffffffffffffffffffffffffffffffffffff1614806106015750610600816105fb610cc1565b610b31565b5b610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790612231565b60405180910390fd5b61064a8383610cc9565b505050565b6000600760009054906101000a900460ff16905090565b610677610671610cc1565b82610d82565b6106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad906122c3565b60405180910390fd5b6106c1838383610e17565b505050565b6106e183838360405180602001604052806000815250610abd565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077657336040517f70fb936f00000000000000000000000000000000000000000000000000000000815260040161076d9190611c41565b60405180910390fd5b6007600081819054906101000a900460ff168092919061079590612312565b91906101000a81548160ff021916908360ff1602179055505060006107ba6008610bc5565b90506107c66008610bd3565b6107d0338261107d565b6107da818361109b565b7feadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d8242338460405161080f949392919061233b565b60405180910390a15050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba906123d3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390612465565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060098054610992906120fc565b80601f01602080910402602001604051908101604052809291908181526020018280546109be906120fc565b8015610a0b5780601f106109e057610100808354040283529160200191610a0b565b820191906000526020600020905b8154815290600101906020018083116109ee57829003601f168201915b5050505050905090565b606060018054610a24906120fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a50906120fc565b8015610a9d5780601f10610a7257610100808354040283529160200191610a9d565b820191906000526020600020905b815481529060010190602001808311610a8057829003601f168201915b5050505050905090565b610ab9610ab2610cc1565b8383611108565b5050565b610ace610ac8610cc1565b83610d82565b610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b04906122c3565b60405180910390fd5b610b1984848484611274565b50505050565b6060610b2a826112d0565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610c7f816113e2565b610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb5906123d3565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d3c8361081b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610d8e8361081b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dd05750610dcf8185610b31565b5b80610e0e57508373ffffffffffffffffffffffffffffffffffffffff16610df6846104f2565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e378261081b565b73ffffffffffffffffffffffffffffffffffffffff1614610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e84906124f7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef390612589565b60405180910390fd5b610f0783838361144e565b610f12600082610cc9565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f6291906125a9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fb991906125dd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611078838383611453565b505050565b611097828260405180602001604052806000815250611458565b5050565b6110a4826113e2565b6110e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110da90612683565b60405180910390fd5b80600660008481526020019081526020016000209081611103919061284f565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116d9061296d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112679190611ada565b60405180910390a3505050565b61127f848484610e17565b61128b848484846114b3565b6112ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c1906129ff565b60405180910390fd5b50505050565b60606112db82610c76565b60006006600084815260200190815260200160002080546112fb906120fc565b80601f0160208091040260200160405190810160405280929190818152602001828054611327906120fc565b80156113745780601f1061134957610100808354040283529160200191611374565b820191906000526020600020905b81548152906001019060200180831161135757829003601f168201915b50505050509050600061138561163a565b9050600081510361139a5781925050506113dd565b6000825111156113cf5780826040516020016113b7929190612a5b565b604051602081830303815290604052925050506113dd565b6113d884611651565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b61146283836116b9565b61146f60008484846114b3565b6114ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a5906129ff565b60405180910390fd5b505050565b60006114d48473ffffffffffffffffffffffffffffffffffffffff16610be9565b1561162d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026114fd610cc1565b8786866040518563ffffffff1660e01b815260040161151f9493929190612ad4565b6020604051808303816000875af192505050801561155b57506040513d601f19601f820116820180604052508101906115589190612b35565b60015b6115dd573d806000811461158b576040519150601f19603f3d011682016040523d82523d6000602084013e611590565b606091505b5060008151036115d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cc906129ff565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611632565b600190505b949350505050565b606060405180602001604052806000815250905090565b606061165c82610c76565b600061166661163a565b9050600081511161168657604051806020016040528060008152506116b1565b8061169084611892565b6040516020016116a1929190612a5b565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171f90612bae565b60405180910390fd5b611731816113e2565b15611771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176890612c1a565b60405180910390fd5b61177d6000838361144e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117cd91906125dd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461188e60008383611453565b5050565b6060600082036118d9576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119ed565b600082905060005b6000821461190b5780806118f490612c3a565b915050600a826119049190612cb1565b91506118e1565b60008167ffffffffffffffff81111561192757611926611d5c565b5b6040519080825280601f01601f1916602001820160405280156119595781602001600182028036833780820191505090505b5090505b600085146119e65760018261197291906125a9565b9150600a856119819190612ce2565b603061198d91906125dd565b60f81b8183815181106119a3576119a2612d13565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119df9190612cb1565b945061195d565b8093505050505b919050565b6000819050919050565b611a05816119f2565b82525050565b6000602082019050611a2060008301846119fc565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a6f81611a3a565b8114611a7a57600080fd5b50565b600081359050611a8c81611a66565b92915050565b600060208284031215611aa857611aa7611a30565b5b6000611ab684828501611a7d565b91505092915050565b60008115159050919050565b611ad481611abf565b82525050565b6000602082019050611aef6000830184611acb565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b2f578082015181840152602081019050611b14565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b5782611af5565b611b618185611b00565b9350611b71818560208601611b11565b611b7a81611b3b565b840191505092915050565b60006020820190508181036000830152611b9f8184611b4c565b905092915050565b611bb0816119f2565b8114611bbb57600080fd5b50565b600081359050611bcd81611ba7565b92915050565b600060208284031215611be957611be8611a30565b5b6000611bf784828501611bbe565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c2b82611c00565b9050919050565b611c3b81611c20565b82525050565b6000602082019050611c566000830184611c32565b92915050565b611c6581611c20565b8114611c7057600080fd5b50565b600081359050611c8281611c5c565b92915050565b60008060408385031215611c9f57611c9e611a30565b5b6000611cad85828601611c73565b9250506020611cbe85828601611bbe565b9150509250929050565b600060ff82169050919050565b611cde81611cc8565b82525050565b6000602082019050611cf96000830184611cd5565b92915050565b600080600060608486031215611d1857611d17611a30565b5b6000611d2686828701611c73565b9350506020611d3786828701611c73565b9250506040611d4886828701611bbe565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d9482611b3b565b810181811067ffffffffffffffff82111715611db357611db2611d5c565b5b80604052505050565b6000611dc6611a26565b9050611dd28282611d8b565b919050565b600067ffffffffffffffff821115611df257611df1611d5c565b5b611dfb82611b3b565b9050602081019050919050565b82818337600083830152505050565b6000611e2a611e2584611dd7565b611dbc565b905082815260208101848484011115611e4657611e45611d57565b5b611e51848285611e08565b509392505050565b600082601f830112611e6e57611e6d611d52565b5b8135611e7e848260208601611e17565b91505092915050565b600060208284031215611e9d57611e9c611a30565b5b600082013567ffffffffffffffff811115611ebb57611eba611a35565b5b611ec784828501611e59565b91505092915050565b600060208284031215611ee657611ee5611a30565b5b6000611ef484828501611c73565b91505092915050565b611f0681611abf565b8114611f1157600080fd5b50565b600081359050611f2381611efd565b92915050565b60008060408385031215611f4057611f3f611a30565b5b6000611f4e85828601611c73565b9250506020611f5f85828601611f14565b9150509250929050565b600067ffffffffffffffff821115611f8457611f83611d5c565b5b611f8d82611b3b565b9050602081019050919050565b6000611fad611fa884611f69565b611dbc565b905082815260208101848484011115611fc957611fc8611d57565b5b611fd4848285611e08565b509392505050565b600082601f830112611ff157611ff0611d52565b5b8135612001848260208601611f9a565b91505092915050565b6000806000806080858703121561202457612023611a30565b5b600061203287828801611c73565b945050602061204387828801611c73565b935050604061205487828801611bbe565b925050606085013567ffffffffffffffff81111561207557612074611a35565b5b61208187828801611fdc565b91505092959194509250565b600080604083850312156120a4576120a3611a30565b5b60006120b285828601611c73565b92505060206120c385828601611c73565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061211457607f821691505b602082108103612127576121266120cd565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612189602183611b00565b91506121948261212d565b604082019050919050565b600060208201905081810360008301526121b88161217c565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061221b603e83611b00565b9150612226826121bf565b604082019050919050565b6000602082019050818103600083015261224a8161220e565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006122ad602e83611b00565b91506122b882612251565b604082019050919050565b600060208201905081810360008301526122dc816122a0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061231d82611cc8565b915060ff82036123305761232f6122e3565b5b600182019050919050565b600060808201905081810360008301526123558187611b4c565b905061236460208301866119fc565b6123716040830185611c32565b61237e60608301846119fc565b95945050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006123bd601883611b00565b91506123c882612387565b602082019050919050565b600060208201905081810360008301526123ec816123b0565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061244f602983611b00565b915061245a826123f3565b604082019050919050565b6000602082019050818103600083015261247e81612442565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006124e1602583611b00565b91506124ec82612485565b604082019050919050565b60006020820190508181036000830152612510816124d4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612573602483611b00565b915061257e82612517565b604082019050919050565b600060208201905081810360008301526125a281612566565b9050919050565b60006125b4826119f2565b91506125bf836119f2565b92508282039050818111156125d7576125d66122e3565b5b92915050565b60006125e8826119f2565b91506125f3836119f2565b925082820190508082111561260b5761260a6122e3565b5b92915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061266d602e83611b00565b915061267882612611565b604082019050919050565b6000602082019050818103600083015261269c81612660565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026127057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826126c8565b61270f86836126c8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061274c612747612742846119f2565b612727565b6119f2565b9050919050565b6000819050919050565b61276683612731565b61277a61277282612753565b8484546126d5565b825550505050565b600090565b61278f612782565b61279a81848461275d565b505050565b5b818110156127be576127b3600082612787565b6001810190506127a0565b5050565b601f821115612803576127d4816126a3565b6127dd846126b8565b810160208510156127ec578190505b6128006127f8856126b8565b83018261279f565b50505b505050565b600082821c905092915050565b600061282660001984600802612808565b1980831691505092915050565b600061283f8383612815565b9150826002028217905092915050565b61285882611af5565b67ffffffffffffffff81111561287157612870611d5c565b5b61287b82546120fc565b6128868282856127c2565b600060209050601f8311600181146128b957600084156128a7578287015190505b6128b18582612833565b865550612919565b601f1984166128c7866126a3565b60005b828110156128ef578489015182556001820191506020850194506020810190506128ca565b8683101561290c5784890151612908601f891682612815565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612957601983611b00565b915061296282612921565b602082019050919050565b600060208201905081810360008301526129868161294a565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006129e9603283611b00565b91506129f48261298d565b604082019050919050565b60006020820190508181036000830152612a18816129dc565b9050919050565b600081905092915050565b6000612a3582611af5565b612a3f8185612a1f565b9350612a4f818560208601611b11565b80840191505092915050565b6000612a678285612a2a565b9150612a738284612a2a565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000612aa682612a7f565b612ab08185612a8a565b9350612ac0818560208601611b11565b612ac981611b3b565b840191505092915050565b6000608082019050612ae96000830187611c32565b612af66020830186611c32565b612b0360408301856119fc565b8181036060830152612b158184612a9b565b905095945050505050565b600081519050612b2f81611a66565b92915050565b600060208284031215612b4b57612b4a611a30565b5b6000612b5984828501612b20565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612b98602083611b00565b9150612ba382612b62565b602082019050919050565b60006020820190508181036000830152612bc781612b8b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612c04601c83611b00565b9150612c0f82612bce565b602082019050919050565b60006020820190508181036000830152612c3381612bf7565b9050919050565b6000612c45826119f2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c7757612c766122e3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612cbc826119f2565b9150612cc7836119f2565b925082612cd757612cd6612c82565b5b828204905092915050565b6000612ced826119f2565b9150612cf8836119f2565b925082612d0857612d07612c82565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212206f474c5a799ec482d67cb5c3529f1e3152fab98fc48e1ceea67f3c153a72786364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010a5760003560e01c806345576f94116100a257806395d89b411161007157806395d89b41146102b7578063a22cb465146102d5578063b88d4fde146102f1578063c87b56dd1461030d578063e985e9c51461033d5761010a565b806345576f941461021d5780636352211e1461023957806370a082311461026957806382d3614d146102995761010a565b8063095ea7b3116100de578063095ea7b3146101ab57806309e1728e146101c757806323b872dd146101e557806342842e0e146102015761010a565b80629a9b7b1461010f57806301ffc9a71461012d57806306fdde031461015d578063081812fc1461017b575b600080fd5b61011761036d565b6040516101249190611a0b565b60405180910390f35b61014760048036038101906101429190611a92565b61037e565b6040516101549190611ada565b60405180910390f35b610165610460565b6040516101729190611b85565b60405180910390f35b61019560048036038101906101909190611bd3565b6104f2565b6040516101a29190611c41565b60405180910390f35b6101c560048036038101906101c09190611c88565b610538565b005b6101cf61064f565b6040516101dc9190611ce4565b60405180910390f35b6101ff60048036038101906101fa9190611cff565b610666565b005b61021b60048036038101906102169190611cff565b6106c6565b005b61023760048036038101906102329190611e87565b6106e6565b005b610253600480360381019061024e9190611bd3565b61081b565b6040516102609190611c41565b60405180910390f35b610283600480360381019061027e9190611ed0565b6108cc565b6040516102909190611a0b565b60405180910390f35b6102a1610983565b6040516102ae9190611b85565b60405180910390f35b6102bf610a15565b6040516102cc9190611b85565b60405180910390f35b6102ef60048036038101906102ea9190611f29565b610aa7565b005b61030b6004803603810190610306919061200a565b610abd565b005b61032760048036038101906103229190611bd3565b610b1f565b6040516103349190611b85565b60405180910390f35b6103576004803603810190610352919061208d565b610b31565b6040516103649190611ada565b60405180910390f35b60006103796008610bc5565b905090565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061044957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610459575061045882610c0c565b5b9050919050565b60606000805461046f906120fc565b80601f016020809104026020016040519081016040528092919081815260200182805461049b906120fc565b80156104e85780601f106104bd576101008083540402835291602001916104e8565b820191906000526020600020905b8154815290600101906020018083116104cb57829003601f168201915b5050505050905090565b60006104fd82610c76565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105438261081b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa9061219f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105d2610cc1565b73ffffffffffffffffffffffffffffffffffffffff1614806106015750610600816105fb610cc1565b610b31565b5b610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790612231565b60405180910390fd5b61064a8383610cc9565b505050565b6000600760009054906101000a900460ff16905090565b610677610671610cc1565b82610d82565b6106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad906122c3565b60405180910390fd5b6106c1838383610e17565b505050565b6106e183838360405180602001604052806000815250610abd565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077657336040517f70fb936f00000000000000000000000000000000000000000000000000000000815260040161076d9190611c41565b60405180910390fd5b6007600081819054906101000a900460ff168092919061079590612312565b91906101000a81548160ff021916908360ff1602179055505060006107ba6008610bc5565b90506107c66008610bd3565b6107d0338261107d565b6107da818361109b565b7feadfcb503635ff1d1c5dd9bbf0cd82b4a3ec4d00f135444a9ac9f2eee24e6a3d8242338460405161080f949392919061233b565b60405180910390a15050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba906123d3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361093c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093390612465565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060098054610992906120fc565b80601f01602080910402602001604051908101604052809291908181526020018280546109be906120fc565b8015610a0b5780601f106109e057610100808354040283529160200191610a0b565b820191906000526020600020905b8154815290600101906020018083116109ee57829003601f168201915b5050505050905090565b606060018054610a24906120fc565b80601f0160208091040260200160405190810160405280929190818152602001828054610a50906120fc565b8015610a9d5780601f10610a7257610100808354040283529160200191610a9d565b820191906000526020600020905b815481529060010190602001808311610a8057829003601f168201915b5050505050905090565b610ab9610ab2610cc1565b8383611108565b5050565b610ace610ac8610cc1565b83610d82565b610b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b04906122c3565b60405180910390fd5b610b1984848484611274565b50505050565b6060610b2a826112d0565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610c7f816113e2565b610cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb5906123d3565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610d3c8361081b565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610d8e8361081b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610dd05750610dcf8185610b31565b5b80610e0e57508373ffffffffffffffffffffffffffffffffffffffff16610df6846104f2565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610e378261081b565b73ffffffffffffffffffffffffffffffffffffffff1614610e8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e84906124f7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610efc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef390612589565b60405180910390fd5b610f0783838361144e565b610f12600082610cc9565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f6291906125a9565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fb991906125dd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611078838383611453565b505050565b611097828260405180602001604052806000815250611458565b5050565b6110a4826113e2565b6110e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110da90612683565b60405180910390fd5b80600660008481526020019081526020016000209081611103919061284f565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611176576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116d9061296d565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516112679190611ada565b60405180910390a3505050565b61127f848484610e17565b61128b848484846114b3565b6112ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c1906129ff565b60405180910390fd5b50505050565b60606112db82610c76565b60006006600084815260200190815260200160002080546112fb906120fc565b80601f0160208091040260200160405190810160405280929190818152602001828054611327906120fc565b80156113745780601f1061134957610100808354040283529160200191611374565b820191906000526020600020905b81548152906001019060200180831161135757829003601f168201915b50505050509050600061138561163a565b9050600081510361139a5781925050506113dd565b6000825111156113cf5780826040516020016113b7929190612a5b565b604051602081830303815290604052925050506113dd565b6113d884611651565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b61146283836116b9565b61146f60008484846114b3565b6114ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a5906129ff565b60405180910390fd5b505050565b60006114d48473ffffffffffffffffffffffffffffffffffffffff16610be9565b1561162d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026114fd610cc1565b8786866040518563ffffffff1660e01b815260040161151f9493929190612ad4565b6020604051808303816000875af192505050801561155b57506040513d601f19601f820116820180604052508101906115589190612b35565b60015b6115dd573d806000811461158b576040519150601f19603f3d011682016040523d82523d6000602084013e611590565b606091505b5060008151036115d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cc906129ff565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611632565b600190505b949350505050565b606060405180602001604052806000815250905090565b606061165c82610c76565b600061166661163a565b9050600081511161168657604051806020016040528060008152506116b1565b8061169084611892565b6040516020016116a1929190612a5b565b6040516020818303038152906040525b915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171f90612bae565b60405180910390fd5b611731816113e2565b15611771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176890612c1a565b60405180910390fd5b61177d6000838361144e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117cd91906125dd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461188e60008383611453565b5050565b6060600082036118d9576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119ed565b600082905060005b6000821461190b5780806118f490612c3a565b915050600a826119049190612cb1565b91506118e1565b60008167ffffffffffffffff81111561192757611926611d5c565b5b6040519080825280601f01601f1916602001820160405280156119595781602001600182028036833780820191505090505b5090505b600085146119e65760018261197291906125a9565b9150600a856119819190612ce2565b603061198d91906125dd565b60f81b8183815181106119a3576119a2612d13565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119df9190612cb1565b945061195d565b8093505050505b919050565b6000819050919050565b611a05816119f2565b82525050565b6000602082019050611a2060008301846119fc565b92915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611a6f81611a3a565b8114611a7a57600080fd5b50565b600081359050611a8c81611a66565b92915050565b600060208284031215611aa857611aa7611a30565b5b6000611ab684828501611a7d565b91505092915050565b60008115159050919050565b611ad481611abf565b82525050565b6000602082019050611aef6000830184611acb565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611b2f578082015181840152602081019050611b14565b60008484015250505050565b6000601f19601f8301169050919050565b6000611b5782611af5565b611b618185611b00565b9350611b71818560208601611b11565b611b7a81611b3b565b840191505092915050565b60006020820190508181036000830152611b9f8184611b4c565b905092915050565b611bb0816119f2565b8114611bbb57600080fd5b50565b600081359050611bcd81611ba7565b92915050565b600060208284031215611be957611be8611a30565b5b6000611bf784828501611bbe565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c2b82611c00565b9050919050565b611c3b81611c20565b82525050565b6000602082019050611c566000830184611c32565b92915050565b611c6581611c20565b8114611c7057600080fd5b50565b600081359050611c8281611c5c565b92915050565b60008060408385031215611c9f57611c9e611a30565b5b6000611cad85828601611c73565b9250506020611cbe85828601611bbe565b9150509250929050565b600060ff82169050919050565b611cde81611cc8565b82525050565b6000602082019050611cf96000830184611cd5565b92915050565b600080600060608486031215611d1857611d17611a30565b5b6000611d2686828701611c73565b9350506020611d3786828701611c73565b9250506040611d4886828701611bbe565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d9482611b3b565b810181811067ffffffffffffffff82111715611db357611db2611d5c565b5b80604052505050565b6000611dc6611a26565b9050611dd28282611d8b565b919050565b600067ffffffffffffffff821115611df257611df1611d5c565b5b611dfb82611b3b565b9050602081019050919050565b82818337600083830152505050565b6000611e2a611e2584611dd7565b611dbc565b905082815260208101848484011115611e4657611e45611d57565b5b611e51848285611e08565b509392505050565b600082601f830112611e6e57611e6d611d52565b5b8135611e7e848260208601611e17565b91505092915050565b600060208284031215611e9d57611e9c611a30565b5b600082013567ffffffffffffffff811115611ebb57611eba611a35565b5b611ec784828501611e59565b91505092915050565b600060208284031215611ee657611ee5611a30565b5b6000611ef484828501611c73565b91505092915050565b611f0681611abf565b8114611f1157600080fd5b50565b600081359050611f2381611efd565b92915050565b60008060408385031215611f4057611f3f611a30565b5b6000611f4e85828601611c73565b9250506020611f5f85828601611f14565b9150509250929050565b600067ffffffffffffffff821115611f8457611f83611d5c565b5b611f8d82611b3b565b9050602081019050919050565b6000611fad611fa884611f69565b611dbc565b905082815260208101848484011115611fc957611fc8611d57565b5b611fd4848285611e08565b509392505050565b600082601f830112611ff157611ff0611d52565b5b8135612001848260208601611f9a565b91505092915050565b6000806000806080858703121561202457612023611a30565b5b600061203287828801611c73565b945050602061204387828801611c73565b935050604061205487828801611bbe565b925050606085013567ffffffffffffffff81111561207557612074611a35565b5b61208187828801611fdc565b91505092959194509250565b600080604083850312156120a4576120a3611a30565b5b60006120b285828601611c73565b92505060206120c385828601611c73565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061211457607f821691505b602082108103612127576121266120cd565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612189602183611b00565b91506121948261212d565b604082019050919050565b600060208201905081810360008301526121b88161217c565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b600061221b603e83611b00565b9150612226826121bf565b604082019050919050565b6000602082019050818103600083015261224a8161220e565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b60006122ad602e83611b00565b91506122b882612251565b604082019050919050565b600060208201905081810360008301526122dc816122a0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061231d82611cc8565b915060ff82036123305761232f6122e3565b5b600182019050919050565b600060808201905081810360008301526123558187611b4c565b905061236460208301866119fc565b6123716040830185611c32565b61237e60608301846119fc565b95945050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006123bd601883611b00565b91506123c882612387565b602082019050919050565b600060208201905081810360008301526123ec816123b0565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061244f602983611b00565b915061245a826123f3565b604082019050919050565b6000602082019050818103600083015261247e81612442565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006124e1602583611b00565b91506124ec82612485565b604082019050919050565b60006020820190508181036000830152612510816124d4565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612573602483611b00565b915061257e82612517565b604082019050919050565b600060208201905081810360008301526125a281612566565b9050919050565b60006125b4826119f2565b91506125bf836119f2565b92508282039050818111156125d7576125d66122e3565b5b92915050565b60006125e8826119f2565b91506125f3836119f2565b925082820190508082111561260b5761260a6122e3565b5b92915050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061266d602e83611b00565b915061267882612611565b604082019050919050565b6000602082019050818103600083015261269c81612660565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026127057fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826126c8565b61270f86836126c8565b95508019841693508086168417925050509392505050565b6000819050919050565b600061274c612747612742846119f2565b612727565b6119f2565b9050919050565b6000819050919050565b61276683612731565b61277a61277282612753565b8484546126d5565b825550505050565b600090565b61278f612782565b61279a81848461275d565b505050565b5b818110156127be576127b3600082612787565b6001810190506127a0565b5050565b601f821115612803576127d4816126a3565b6127dd846126b8565b810160208510156127ec578190505b6128006127f8856126b8565b83018261279f565b50505b505050565b600082821c905092915050565b600061282660001984600802612808565b1980831691505092915050565b600061283f8383612815565b9150826002028217905092915050565b61285882611af5565b67ffffffffffffffff81111561287157612870611d5c565b5b61287b82546120fc565b6128868282856127c2565b600060209050601f8311600181146128b957600084156128a7578287015190505b6128b18582612833565b865550612919565b601f1984166128c7866126a3565b60005b828110156128ef578489015182556001820191506020850194506020810190506128ca565b8683101561290c5784890151612908601f891682612815565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612957601983611b00565b915061296282612921565b602082019050919050565b600060208201905081810360008301526129868161294a565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006129e9603283611b00565b91506129f48261298d565b604082019050919050565b60006020820190508181036000830152612a18816129dc565b9050919050565b600081905092915050565b6000612a3582611af5565b612a3f8185612a1f565b9350612a4f818560208601611b11565b80840191505092915050565b6000612a678285612a2a565b9150612a738284612a2a565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000612aa682612a7f565b612ab08185612a8a565b9350612ac0818560208601611b11565b612ac981611b3b565b840191505092915050565b6000608082019050612ae96000830187611c32565b612af66020830186611c32565b612b0360408301856119fc565b8181036060830152612b158184612a9b565b905095945050505050565b600081519050612b2f81611a66565b92915050565b600060208284031215612b4b57612b4a611a30565b5b6000612b5984828501612b20565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612b98602083611b00565b9150612ba382612b62565b602082019050919050565b60006020820190508181036000830152612bc781612b8b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612c04601c83611b00565b9150612c0f82612bce565b602082019050919050565b60006020820190508181036000830152612c3381612bf7565b9050919050565b6000612c45826119f2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c7757612c766122e3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612cbc826119f2565b9150612cc7836119f2565b925082612cd757612cd6612c82565b5b828204905092915050565b6000612ced826119f2565b9150612cf8836119f2565b925082612d0857612d07612c82565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212206f474c5a799ec482d67cb5c3529f1e3152fab98fc48e1ceea67f3c153a72786364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 144,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 148,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 152,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 158,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1126,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1939,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "s_TotalNFTs",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 1942,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "s_tokenIds",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Counter)1588_storage"
      },
      {
        "astId": 1944,
        "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
        "label": "s_artist",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1588_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1587,
            "contract": "contracts/NftAlbum.sol:ArijitSinghMusicAlbum",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}